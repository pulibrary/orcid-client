=begin
#ORCID Member

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: Latest

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class DevelopmentMemberAPIV30Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a notification
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [NotificationPermissionV30] :body 
    # @return [String]
    def add_permission_notificationv3(orcid, opts = {})
      data, _status_code, _headers = add_permission_notificationv3_with_http_info(orcid, opts)
      data
    end

    # Add a notification
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [NotificationPermissionV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def add_permission_notificationv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.add_permission_notificationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.add_permission_notificationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/notification-permission'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#add_permission_notificationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an address
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV30] :body 
    # @return [nil]
    def create_addressv3(orcid, opts = {})
      create_addressv3_with_http_info(orcid, opts)
      nil
    end

    # Add an address
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_addressv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_addressv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_addressv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/address'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_addressv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Distinction
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [DistinctionV30] :body 
    # @return [String]
    def create_distinctionv3(orcid, opts = {})
      data, _status_code, _headers = create_distinctionv3_with_http_info(orcid, opts)
      data
    end

    # Create an Distinction
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [DistinctionV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_distinctionv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_distinctionv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_distinctionv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/distinction'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_distinctionv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Education
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV30] :body 
    # @return [String]
    def create_educationv3(orcid, opts = {})
      data, _status_code, _headers = create_educationv3_with_http_info(orcid, opts)
      data
    end

    # Create an Education
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_educationv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_educationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_educationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/education'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_educationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Employment
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV30] :body 
    # @return [String]
    def create_employmentv3(orcid, opts = {})
      data, _status_code, _headers = create_employmentv3_with_http_info(orcid, opts)
      data
    end

    # Create an Employment
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_employmentv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_employmentv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_employmentv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/employment'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_employmentv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add external identifier
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV30] :body 
    # @return [nil]
    def create_external_identifierv3(orcid, opts = {})
      create_external_identifierv3_with_http_info(orcid, opts)
      nil
    end

    # Add external identifier
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_external_identifierv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_external_identifierv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_external_identifierv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/external-identifiers'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_external_identifierv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Funding
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV30] :body 
    # @return [String]
    def create_fundingv3(orcid, opts = {})
      data, _status_code, _headers = create_fundingv3_with_http_info(orcid, opts)
      data
    end

    # Create a Funding
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_fundingv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_fundingv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_fundingv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/funding'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_fundingv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Group
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [nil]
    def create_group_id_recordv3(opts = {})
      create_group_id_recordv3_with_http_info(opts)
      nil
    end

    # Create a Group
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_group_id_recordv3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_group_id_recordv3 ...'
      end
      # resource path
      local_var_path = '/v3.0/group-id-record'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_group_id_recordv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an InvitedPosition
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [InvitedPositionV30] :body 
    # @return [String]
    def create_invited_positionv3(orcid, opts = {})
      data, _status_code, _headers = create_invited_positionv3_with_http_info(orcid, opts)
      data
    end

    # Create an InvitedPosition
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [InvitedPositionV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_invited_positionv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_invited_positionv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_invited_positionv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/invited-position'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_invited_positionv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add keyword
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV30] :body 
    # @return [nil]
    def create_keywordv3(orcid, opts = {})
      create_keywordv3_with_http_info(orcid, opts)
      nil
    end

    # Add keyword
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_keywordv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_keywordv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_keywordv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/keywords'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_keywordv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Membership
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [MembershipV30] :body 
    # @return [String]
    def create_membershipv3(orcid, opts = {})
      data, _status_code, _headers = create_membershipv3_with_http_info(orcid, opts)
      data
    end

    # Create an Membership
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [MembershipV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_membershipv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_membershipv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_membershipv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/membership'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_membershipv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add other name
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV30] :body 
    # @return [nil]
    def create_other_namev3(orcid, opts = {})
      create_other_namev3_with_http_info(orcid, opts)
      nil
    end

    # Add other name
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_other_namev3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_other_namev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_other_namev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/other-names'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_other_namev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Peer Review
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV30] :body 
    # @return [String]
    def create_peer_reviewv3(orcid, opts = {})
      data, _status_code, _headers = create_peer_reviewv3_with_http_info(orcid, opts)
      data
    end

    # Create a Peer Review
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_peer_reviewv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_peer_reviewv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_peer_reviewv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/peer-review'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_peer_reviewv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Qualification
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [QualificationV30] :body 
    # @return [String]
    def create_qualificationv3(orcid, opts = {})
      data, _status_code, _headers = create_qualificationv3_with_http_info(orcid, opts)
      data
    end

    # Create an Qualification
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [QualificationV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_qualificationv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_qualificationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_qualificationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/qualification'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_qualificationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Research Resource
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearchResourceV30] :body 
    # @return [String]
    def create_research_resourcev3(orcid, opts = {})
      data, _status_code, _headers = create_research_resourcev3_with_http_info(orcid, opts)
      data
    end

    # Create a Research Resource
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearchResourceV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_research_resourcev3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_research_resourcev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_research_resourcev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/research-resource'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_research_resourcev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a new researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV30] :body 
    # @return [nil]
    def create_researcher_urlv3(orcid, opts = {})
      create_researcher_urlv3_with_http_info(orcid, opts)
      nil
    end

    # Add a new researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_researcher_urlv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_researcher_urlv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_researcher_urlv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/researcher-urls'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_researcher_urlv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Service
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceV30] :body 
    # @return [String]
    def create_servicev3(orcid, opts = {})
      data, _status_code, _headers = create_servicev3_with_http_info(orcid, opts)
      data
    end

    # Create an Service
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_servicev3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_servicev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_servicev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/service'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_servicev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a list of Works
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkBulkV30] :body 
    # @return [String]
    def create_worksv3(orcid, opts = {})
      data, _status_code, _headers = create_worksv3_with_http_info(orcid, opts)
      data
    end

    # Create a list of Works
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkBulkV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_worksv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_worksv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_worksv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/works'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_worksv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Work
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV30] :body 
    # @return [String]
    def create_workv3(orcid, opts = {})
      data, _status_code, _headers = create_workv3_with_http_info(orcid, opts)
      data
    end

    # Create a Work
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV30] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_workv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.create_workv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.create_workv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/work'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#create_workv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_addressv3(orcid, put_code, opts = {})
      delete_addressv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_addressv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_addressv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_addressv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_addressv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/address/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_addressv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_distinctionv3(orcid, put_code, opts = {})
      delete_distinctionv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_distinctionv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_distinctionv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_distinctionv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_distinctionv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/distinction/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_distinctionv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_educationv3(orcid, put_code, opts = {})
      delete_educationv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_educationv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_educationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_educationv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_educationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/education/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_educationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_employmentv3(orcid, put_code, opts = {})
      delete_employmentv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_employmentv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_employmentv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_employmentv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_employmentv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/employment/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_employmentv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_external_identifierv3(orcid, put_code, opts = {})
      delete_external_identifierv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_external_identifierv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_external_identifierv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_external_identifierv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_external_identifierv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/external-identifiers/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_external_identifierv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_fundingv3(orcid, put_code, opts = {})
      delete_fundingv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_fundingv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_fundingv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_fundingv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_fundingv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/funding/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_fundingv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_id_recordv3(put_code, opts = {})
      delete_group_id_recordv3_with_http_info(put_code, opts)
      nil
    end

    # Delete a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_id_recordv3_with_http_info(put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_group_id_recordv3 ...'
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_group_id_recordv3"
      end
      # resource path
      local_var_path = '/v3.0/group-id-record/{putCode}'.sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_group_id_recordv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_invited_positionv3(orcid, put_code, opts = {})
      delete_invited_positionv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_invited_positionv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_invited_positionv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_invited_positionv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_invited_positionv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/invited-position/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_invited_positionv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_keywordv3(orcid, put_code, opts = {})
      delete_keywordv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_keywordv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_keywordv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_keywordv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_keywordv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/keywords/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_keywordv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_membershipv3(orcid, put_code, opts = {})
      delete_membershipv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_membershipv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_membershipv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_membershipv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_membershipv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/membership/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_membershipv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_other_namev3(orcid, put_code, opts = {})
      delete_other_namev3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_other_namev3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_other_namev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_other_namev3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_other_namev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/other-names/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_other_namev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_peer_reviewv3(orcid, put_code, opts = {})
      delete_peer_reviewv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_peer_reviewv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_peer_reviewv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_peer_reviewv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_peer_reviewv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/peer-review/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_peer_reviewv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_qualificationv3(orcid, put_code, opts = {})
      delete_qualificationv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_qualificationv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_qualificationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_qualificationv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_qualificationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/qualification/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_qualificationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_research_resourcev3(orcid, put_code, opts = {})
      delete_research_resourcev3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_research_resourcev3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_research_resourcev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_research_resourcev3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_research_resourcev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/research-resource/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_research_resourcev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete one researcher url from an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_researcher_urlv3(orcid, put_code, opts = {})
      delete_researcher_urlv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete one researcher url from an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_researcher_urlv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_researcher_urlv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_researcher_urlv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_researcher_urlv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/researcher-urls/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_researcher_urlv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_servicev3(orcid, put_code, opts = {})
      delete_servicev3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_servicev3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_servicev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_servicev3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_servicev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/service/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_servicev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_workv3(orcid, put_code, opts = {})
      delete_workv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_workv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.delete_workv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.delete_workv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.delete_workv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/work/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#delete_workv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV30] :body 
    # @return [nil]
    def edit_addressv3(orcid, put_code, opts = {})
      edit_addressv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_addressv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.edit_addressv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.edit_addressv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.edit_addressv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/address/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#edit_addressv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV30] :body 
    # @return [nil]
    def edit_external_identifierv3(orcid, put_code, opts = {})
      edit_external_identifierv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_external_identifierv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.edit_external_identifierv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.edit_external_identifierv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.edit_external_identifierv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/external-identifiers/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#edit_external_identifierv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV30] :body 
    # @return [nil]
    def edit_keywordv3(orcid, put_code, opts = {})
      edit_keywordv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_keywordv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.edit_keywordv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.edit_keywordv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.edit_keywordv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/keywords/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#edit_keywordv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV30] :body 
    # @return [nil]
    def edit_other_namev3(orcid, put_code, opts = {})
      edit_other_namev3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_other_namev3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.edit_other_namev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.edit_other_namev3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.edit_other_namev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/other-names/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#edit_other_namev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV30] :body 
    # @return [nil]
    def edit_researcher_urlv3(orcid, put_code, opts = {})
      edit_researcher_urlv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edits researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_researcher_urlv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.edit_researcher_urlv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.edit_researcher_urlv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.edit_researcher_urlv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/researcher-urls/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#edit_researcher_urlv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Archive a notification
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def flag_as_archived_permission_notificationv3(orcid, id, opts = {})
      data, _status_code, _headers = flag_as_archived_permission_notificationv3_with_http_info(orcid, id, opts)
      data
    end

    # Archive a notification
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Fixnum, Hash)>] Notification data, response status code and response headers
    def flag_as_archived_permission_notificationv3_with_http_info(orcid, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.flag_as_archived_permission_notificationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.flag_as_archived_permission_notificationv3"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DevelopmentMemberAPIV30Api.flag_as_archived_permission_notificationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/notification-permission/{id}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Notification')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#flag_as_archived_permission_notificationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [SearchV30]
    def search_by_queryv3(opts = {})
      data, _status_code, _headers = search_by_queryv3_with_http_info(opts)
      data
    end

    # Search records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [Array<(SearchV30, Fixnum, Hash)>] SearchV30 data, response status code and response headers
    def search_by_queryv3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.search_by_queryv3 ...'
      end
      # resource path
      local_var_path = '/v3.0/search'

      # Using all of the options as parameters
      query_params = opts

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#search_by_queryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [nil]
    def search_by_queryv3_0(opts = {})
      search_by_queryv3_0_with_http_info(opts)
      nil
    end

    # Search records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def search_by_queryv3_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.search_by_queryv3_0 ...'
      end
      # resource path
      local_var_path = '/v3.0/csv-search'

      # query parameters
      query_params = {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#search_by_queryv3_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [nil]
    def search_by_queryv3_1(opts = {})
      search_by_queryv3_1_with_http_info(opts)
      nil
    end

    # Search records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def search_by_queryv3_1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.search_by_queryv3_1 ...'
      end
      # resource path
      local_var_path = '/v3.0/expanded-search'

      # query parameters
      query_params = {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#search_by_queryv3_1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [DistinctionV30] :body 
    # @return [nil]
    def update_distinctionv3(orcid, put_code, opts = {})
      update_distinctionv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [DistinctionV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_distinctionv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_distinctionv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_distinctionv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_distinctionv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/distinction/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_distinctionv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV30] :body 
    # @return [nil]
    def update_educationv3(orcid, put_code, opts = {})
      update_educationv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_educationv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_educationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_educationv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_educationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/education/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_educationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV30] :body 
    # @return [nil]
    def update_employmentv3(orcid, put_code, opts = {})
      update_employmentv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_employmentv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_employmentv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_employmentv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_employmentv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/employment/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_employmentv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV30] :body 
    # @return [nil]
    def update_fundingv3(orcid, put_code, opts = {})
      update_fundingv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_fundingv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_fundingv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_fundingv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_fundingv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/funding/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_fundingv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [nil]
    def update_group_id_recordv3(put_code, opts = {})
      update_group_id_recordv3_with_http_info(put_code, opts)
      nil
    end

    # Update a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_group_id_recordv3_with_http_info(put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_group_id_recordv3 ...'
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_group_id_recordv3"
      end
      # resource path
      local_var_path = '/v3.0/group-id-record/{putCode}'.sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_group_id_recordv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [InvitedPositionV30] :body 
    # @return [nil]
    def update_invited_positionv3(orcid, put_code, opts = {})
      update_invited_positionv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [InvitedPositionV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_invited_positionv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_invited_positionv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_invited_positionv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_invited_positionv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/invited-position/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_invited_positionv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [MembershipV30] :body 
    # @return [nil]
    def update_membershipv3(orcid, put_code, opts = {})
      update_membershipv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [MembershipV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_membershipv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_membershipv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_membershipv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_membershipv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/membership/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_membershipv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV30] :body 
    # @return [nil]
    def update_peer_reviewv3(orcid, put_code, opts = {})
      update_peer_reviewv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_peer_reviewv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_peer_reviewv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_peer_reviewv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_peer_reviewv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/peer-review/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_peer_reviewv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [QualificationV30] :body 
    # @return [nil]
    def update_qualificationv3(orcid, put_code, opts = {})
      update_qualificationv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [QualificationV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_qualificationv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_qualificationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_qualificationv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_qualificationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/qualification/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_qualificationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearchResourceV30] :body 
    # @return [nil]
    def update_research_resourcev3(orcid, put_code, opts = {})
      update_research_resourcev3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearchResourceV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_research_resourcev3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_research_resourcev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_research_resourcev3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_research_resourcev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/research-resource/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_research_resourcev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceV30] :body 
    # @return [nil]
    def update_servicev3(orcid, put_code, opts = {})
      update_servicev3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_servicev3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_servicev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_servicev3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_servicev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/service/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_servicev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV30] :body 
    # @return [nil]
    def update_workv3(orcid, put_code, opts = {})
      update_workv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV30] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_workv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.update_workv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.update_workv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.update_workv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/work/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#update_workv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all activities
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [ActivitiesSummaryV30]
    def view_activitiesv3(orcid, opts = {})
      data, _status_code, _headers = view_activitiesv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all activities
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivitiesSummaryV30, Fixnum, Hash)>] ActivitiesSummaryV30 data, response status code and response headers
    def view_activitiesv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_activitiesv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_activitiesv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/activities'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ActivitiesSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_activitiesv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all addresses of a profile
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [AddressesV30]
    def view_addressesv3(orcid, opts = {})
      data, _status_code, _headers = view_addressesv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all addresses of a profile
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressesV30, Fixnum, Hash)>] AddressesV30 data, response status code and response headers
    def view_addressesv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_addressesv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_addressesv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/address'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddressesV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_addressesv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_addressv3(orcid, put_code, opts = {})
      view_addressv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Fetch an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_addressv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_addressv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_addressv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_addressv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/address/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_addressv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get biography details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [BiographyV30]
    def view_biographyv3(orcid, opts = {})
      data, _status_code, _headers = view_biographyv3_with_http_info(orcid, opts)
      data
    end

    # Get biography details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BiographyV30, Fixnum, Hash)>] BiographyV30 data, response status code and response headers
    def view_biographyv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_biographyv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_biographyv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/biography'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BiographyV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_biographyv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch client details
    # 
    # @param client_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_clientv3(client_id, opts = {})
      view_clientv3_with_http_info(client_id, opts)
      nil
    end

    # Fetch client details
    # 
    # @param client_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_clientv3_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_clientv3 ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling DevelopmentMemberAPIV30Api.view_clientv3"
      end
      if @api_client.config.client_side_validation && client_id !~ Regexp.new(/[^\/]+/)
        fail ArgumentError, "invalid value for 'client_id' when calling DevelopmentMemberAPIV30Api.view_clientv3, must conform to the pattern /[^\/]+/."
      end

      # resource path
      local_var_path = '/v3.0/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_clientv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Distinction summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [DistinctionSummaryV30]
    def view_distinction_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_distinction_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Distinction summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DistinctionSummaryV30, Fixnum, Hash)>] DistinctionSummaryV30 data, response status code and response headers
    def view_distinction_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_distinction_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_distinction_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_distinction_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/distinction/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DistinctionSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_distinction_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all distinctions
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [DistinctionsSummaryV30]
    def view_distinctionsv3(orcid, opts = {})
      data, _status_code, _headers = view_distinctionsv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all distinctions
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DistinctionsSummaryV30, Fixnum, Hash)>] DistinctionsSummaryV30 data, response status code and response headers
    def view_distinctionsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_distinctionsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_distinctionsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/distinctions'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DistinctionsSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_distinctionsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [DistinctionV30]
    def view_distinctionv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_distinctionv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DistinctionV30, Fixnum, Hash)>] DistinctionV30 data, response status code and response headers
    def view_distinctionv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_distinctionv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_distinctionv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_distinctionv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/distinction/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DistinctionV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_distinctionv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Education summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EducationSummaryV30]
    def view_education_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_education_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Education summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationSummaryV30, Fixnum, Hash)>] EducationSummaryV30 data, response status code and response headers
    def view_education_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_education_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_education_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_education_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/education/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_education_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all educations
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [EducationsSummaryV30]
    def view_educationsv3(orcid, opts = {})
      data, _status_code, _headers = view_educationsv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all educations
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationsSummaryV30, Fixnum, Hash)>] EducationsSummaryV30 data, response status code and response headers
    def view_educationsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_educationsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_educationsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/educations'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationsSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_educationsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EducationV30]
    def view_educationv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_educationv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationV30, Fixnum, Hash)>] EducationV30 data, response status code and response headers
    def view_educationv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_educationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_educationv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_educationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/education/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_educationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all emails for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_emailsv3(orcid, opts = {})
      view_emailsv3_with_http_info(orcid, opts)
      nil
    end

    # Fetch all emails for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_emailsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_emailsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_emailsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/email'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_emailsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Employment Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EmploymentSummaryV30]
    def view_employment_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_employment_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Employment Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmploymentSummaryV30, Fixnum, Hash)>] EmploymentSummaryV30 data, response status code and response headers
    def view_employment_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_employment_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_employment_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_employment_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/employment/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmploymentSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_employment_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all employments
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [EmploymentsSummaryV30]
    def view_employmentsv3(orcid, opts = {})
      data, _status_code, _headers = view_employmentsv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all employments
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmploymentsSummaryV30, Fixnum, Hash)>] EmploymentsSummaryV30 data, response status code and response headers
    def view_employmentsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_employmentsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_employmentsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/employments'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmploymentsSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_employmentsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EmploymentV30]
    def view_employmentv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_employmentv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmploymentV30, Fixnum, Hash)>] EmploymentV30 data, response status code and response headers
    def view_employmentv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_employmentv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_employmentv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_employmentv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/employment/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmploymentV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_employmentv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch external identifiers
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_external_identifiersv3(orcid, opts = {})
      view_external_identifiersv3_with_http_info(orcid, opts)
      nil
    end

    # Fetch external identifiers
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_external_identifiersv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_external_identifiersv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_external_identifiersv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/external-identifiers'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_external_identifiersv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_external_identifierv3(orcid, put_code, opts = {})
      view_external_identifierv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Fetch external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_external_identifierv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_external_identifierv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_external_identifierv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_external_identifierv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/external-identifiers/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_external_identifierv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Funding Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [FundingSummaryV30]
    def view_funding_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_funding_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Funding Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingSummaryV30, Fixnum, Hash)>] FundingSummaryV30 data, response status code and response headers
    def view_funding_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_funding_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_funding_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_funding_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/funding/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_funding_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all fundings
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [FundingsV30]
    def view_fundingsv3(orcid, opts = {})
      data, _status_code, _headers = view_fundingsv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all fundings
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingsV30, Fixnum, Hash)>] FundingsV30 data, response status code and response headers
    def view_fundingsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_fundingsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_fundingsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/fundings'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingsV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_fundingsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [FundingV30]
    def view_fundingv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_fundingv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingV30, Fixnum, Hash)>] FundingV30 data, response status code and response headers
    def view_fundingv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_fundingv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_fundingv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_fundingv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/funding/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_fundingv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Groups
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_size  (default to 100)
    # @option opts [String] :page  (default to 1)
    # @option opts [String] :name 
    # @option opts [String] :group_id 
    # @return [GroupIdRecords]
    def view_group_id_recordsv3(opts = {})
      data, _status_code, _headers = view_group_id_recordsv3_with_http_info(opts)
      data
    end

    # Fetch Groups
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_size 
    # @option opts [String] :page 
    # @option opts [String] :name 
    # @option opts [String] :group_id 
    # @return [Array<(GroupIdRecords, Fixnum, Hash)>] GroupIdRecords data, response status code and response headers
    def view_group_id_recordsv3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_group_id_recordsv3 ...'
      end
      # resource path
      local_var_path = '/v3.0/group-id-record'

      # query parameters
      query_params = {}
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'group-id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupIdRecords')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_group_id_recordsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [GroupIdRecord]
    def view_group_id_recordv3(put_code, opts = {})
      data, _status_code, _headers = view_group_id_recordv3_with_http_info(put_code, opts)
      data
    end

    # Fetch a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupIdRecord, Fixnum, Hash)>] GroupIdRecord data, response status code and response headers
    def view_group_id_recordv3_with_http_info(put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_group_id_recordv3 ...'
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_group_id_recordv3"
      end
      # resource path
      local_var_path = '/v3.0/group-id-record/{putCode}'.sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupIdRecord')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_group_id_recordv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an InvitedPosition summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [InvitedPositionSummaryV30]
    def view_invited_position_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_invited_position_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an InvitedPosition summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvitedPositionSummaryV30, Fixnum, Hash)>] InvitedPositionSummaryV30 data, response status code and response headers
    def view_invited_position_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_invited_position_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_invited_position_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_invited_position_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/invited-position/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitedPositionSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_invited_position_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all invitedPositions
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [InvitedPositionsV30]
    def view_invited_positionsv3(orcid, opts = {})
      data, _status_code, _headers = view_invited_positionsv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all invitedPositions
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvitedPositionsV30, Fixnum, Hash)>] InvitedPositionsV30 data, response status code and response headers
    def view_invited_positionsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_invited_positionsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_invited_positionsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/invited-positions'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitedPositionsV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_invited_positionsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [InvitedPositionV30]
    def view_invited_positionv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_invited_positionv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvitedPositionV30, Fixnum, Hash)>] InvitedPositionV30 data, response status code and response headers
    def view_invited_positionv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_invited_positionv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_invited_positionv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_invited_positionv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/invited-position/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitedPositionV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_invited_positionv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch keywords
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_keywordsv3(orcid, opts = {})
      view_keywordsv3_with_http_info(orcid, opts)
      nil
    end

    # Fetch keywords
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_keywordsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_keywordsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_keywordsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/keywords'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_keywordsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_keywordv3(orcid, put_code, opts = {})
      view_keywordv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Fetch keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_keywordv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_keywordv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_keywordv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_keywordv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/keywords/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_keywordv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Membership summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [MembershipSummaryV30]
    def view_membership_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_membership_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Membership summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembershipSummaryV30, Fixnum, Hash)>] MembershipSummaryV30 data, response status code and response headers
    def view_membership_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_membership_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_membership_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_membership_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/membership/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MembershipSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_membership_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all memberships
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [MembershipsV30]
    def view_membershipsv3(orcid, opts = {})
      data, _status_code, _headers = view_membershipsv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all memberships
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembershipsV30, Fixnum, Hash)>] MembershipsV30 data, response status code and response headers
    def view_membershipsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_membershipsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_membershipsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/memberships'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MembershipsV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_membershipsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [MembershipV30]
    def view_membershipv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_membershipv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembershipV30, Fixnum, Hash)>] MembershipV30 data, response status code and response headers
    def view_membershipv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_membershipv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_membershipv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_membershipv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/membership/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MembershipV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_membershipv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Other names
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_other_namesv3(orcid, opts = {})
      view_other_namesv3_with_http_info(orcid, opts)
      nil
    end

    # Fetch Other names
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_other_namesv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_other_namesv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_other_namesv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/other-names'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_other_namesv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_other_namev3(orcid, put_code, opts = {})
      view_other_namev3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Fetch Other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_other_namev3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_other_namev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_other_namev3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_other_namev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/other-names/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_other_namev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Peer Review Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [PeerReviewSummaryV30]
    def view_peer_review_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_peer_review_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Peer Review Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerReviewSummaryV30, Fixnum, Hash)>] PeerReviewSummaryV30 data, response status code and response headers
    def view_peer_review_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_peer_review_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_peer_review_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_peer_review_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/peer-review/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PeerReviewSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_peer_review_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all peer reviews
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [PeerReviewsV30]
    def view_peer_reviewsv3(orcid, opts = {})
      data, _status_code, _headers = view_peer_reviewsv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all peer reviews
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerReviewsV30, Fixnum, Hash)>] PeerReviewsV30 data, response status code and response headers
    def view_peer_reviewsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_peer_reviewsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_peer_reviewsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/peer-reviews'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PeerReviewsV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_peer_reviewsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [PeerReviewV30]
    def view_peer_reviewv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_peer_reviewv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerReviewV30, Fixnum, Hash)>] PeerReviewV30 data, response status code and response headers
    def view_peer_reviewv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_peer_reviewv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_peer_reviewv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_peer_reviewv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/peer-review/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PeerReviewV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_peer_reviewv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a notification by id
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def view_permission_notificationv3(orcid, id, opts = {})
      data, _status_code, _headers = view_permission_notificationv3_with_http_info(orcid, id, opts)
      data
    end

    # Fetch a notification by id
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Fixnum, Hash)>] Notification data, response status code and response headers
    def view_permission_notificationv3_with_http_info(orcid, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_permission_notificationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_permission_notificationv3"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DevelopmentMemberAPIV30Api.view_permission_notificationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/notification-permission/{id}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Notification')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_permission_notificationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch personal details for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [PersonalDetailsV30]
    def view_personal_detailsv3(orcid, opts = {})
      data, _status_code, _headers = view_personal_detailsv3_with_http_info(orcid, opts)
      data
    end

    # Fetch personal details for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalDetailsV30, Fixnum, Hash)>] PersonalDetailsV30 data, response status code and response headers
    def view_personal_detailsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_personal_detailsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_personal_detailsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/personal-details'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PersonalDetailsV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_personal_detailsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch person details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_personv3(orcid, opts = {})
      view_personv3_with_http_info(orcid, opts)
      nil
    end

    # Fetch person details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_personv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_personv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_personv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/person'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_personv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Qualification summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [QualificationSummaryV30]
    def view_qualification_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_qualification_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Qualification summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(QualificationSummaryV30, Fixnum, Hash)>] QualificationSummaryV30 data, response status code and response headers
    def view_qualification_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_qualification_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_qualification_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_qualification_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/qualification/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QualificationSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_qualification_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all qualifications
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [QualificationsV30]
    def view_qualificationsv3(orcid, opts = {})
      data, _status_code, _headers = view_qualificationsv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all qualifications
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(QualificationsV30, Fixnum, Hash)>] QualificationsV30 data, response status code and response headers
    def view_qualificationsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_qualificationsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_qualificationsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/qualifications'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QualificationsV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_qualificationsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [QualificationV30]
    def view_qualificationv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_qualificationv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(QualificationV30, Fixnum, Hash)>] QualificationV30 data, response status code and response headers
    def view_qualificationv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_qualificationv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_qualificationv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_qualificationv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/qualification/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QualificationV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_qualificationv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch record details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [RecordV30]
    def view_recordv3(orcid, opts = {})
      data, _status_code, _headers = view_recordv3_with_http_info(orcid, opts)
      data
    end

    # Fetch record details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecordV30, Fixnum, Hash)>] RecordV30 data, response status code and response headers
    def view_recordv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_recordv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_recordv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecordV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_recordv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Research Resource summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [ResearchResourceSummaryV30]
    def view_research_resource_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_research_resource_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Research Resource summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResearchResourceSummaryV30, Fixnum, Hash)>] ResearchResourceSummaryV30 data, response status code and response headers
    def view_research_resource_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_research_resource_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_research_resource_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_research_resource_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/research-resource/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResearchResourceSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_research_resource_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all Research Resources
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [ResearchResourcesV30]
    def view_research_resourcesv3(orcid, opts = {})
      data, _status_code, _headers = view_research_resourcesv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all Research Resources
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResearchResourcesV30, Fixnum, Hash)>] ResearchResourcesV30 data, response status code and response headers
    def view_research_resourcesv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_research_resourcesv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_research_resourcesv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/research-resources'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResearchResourcesV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_research_resourcesv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [ResearchResourceV30]
    def view_research_resourcev3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_research_resourcev3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResearchResourceV30, Fixnum, Hash)>] ResearchResourceV30 data, response status code and response headers
    def view_research_resourcev3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_research_resourcev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_research_resourcev3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_research_resourcev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/research-resource/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResearchResourceV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_research_resourcev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all researcher urls for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_researcher_urlsv3(orcid, opts = {})
      view_researcher_urlsv3_with_http_info(orcid, opts)
      nil
    end

    # Fetch all researcher urls for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_researcher_urlsv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_researcher_urlsv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_researcher_urlsv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/researcher-urls'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_researcher_urlsv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch one researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_researcher_urlv3(orcid, put_code, opts = {})
      view_researcher_urlv3_with_http_info(orcid, put_code, opts)
      nil
    end

    # Fetch one researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_researcher_urlv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_researcher_urlv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_researcher_urlv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_researcher_urlv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/researcher-urls/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_researcher_urlv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Service summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [ServiceSummaryV30]
    def view_service_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_service_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Service summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceSummaryV30, Fixnum, Hash)>] ServiceSummaryV30 data, response status code and response headers
    def view_service_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_service_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_service_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_service_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/service/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_service_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all services
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [ServicesV30]
    def view_servicesv3(orcid, opts = {})
      data, _status_code, _headers = view_servicesv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all services
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServicesV30, Fixnum, Hash)>] ServicesV30 data, response status code and response headers
    def view_servicesv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_servicesv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_servicesv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/services'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicesV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_servicesv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [ServiceV30]
    def view_servicev3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_servicev3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceV30, Fixnum, Hash)>] ServiceV30 data, response status code and response headers
    def view_servicev3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_servicev3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_servicev3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_servicev3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/service/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_servicev3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch specified works
    # 
    # @param orcid 
    # @param put_codes 
    # @param [Hash] opts the optional parameters
    # @return [WorkBulkV30]
    def view_specified_worksv3(orcid, put_codes, opts = {})
      data, _status_code, _headers = view_specified_worksv3_with_http_info(orcid, put_codes, opts)
      data
    end

    # Fetch specified works
    # 
    # @param orcid 
    # @param put_codes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkBulkV30, Fixnum, Hash)>] WorkBulkV30 data, response status code and response headers
    def view_specified_worksv3_with_http_info(orcid, put_codes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_specified_worksv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_specified_worksv3"
      end
      # verify the required parameter 'put_codes' is set
      if @api_client.config.client_side_validation && put_codes.nil?
        fail ArgumentError, "Missing the required parameter 'put_codes' when calling DevelopmentMemberAPIV30Api.view_specified_worksv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/works/{putCodes}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCodes' + '}', put_codes.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkBulkV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_specified_worksv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_status_json(opts = {})
      view_status_json_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_status_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_status_json ...'
      end
      # resource path
      local_var_path = '/v3.0/apiStatus'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_status_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Work Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [WorkSummaryV30]
    def view_work_summaryv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_work_summaryv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Work Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkSummaryV30, Fixnum, Hash)>] WorkSummaryV30 data, response status code and response headers
    def view_work_summaryv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_work_summaryv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_work_summaryv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_work_summaryv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/work/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_work_summaryv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all works
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [WorksSummaryV30]
    def view_worksv3(orcid, opts = {})
      data, _status_code, _headers = view_worksv3_with_http_info(orcid, opts)
      data
    end

    # Fetch all works
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorksSummaryV30, Fixnum, Hash)>] WorksSummaryV30 data, response status code and response headers
    def view_worksv3_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_worksv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_worksv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/works'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksSummaryV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_worksv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [WorkV30]
    def view_workv3(orcid, put_code, opts = {})
      data, _status_code, _headers = view_workv3_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkV30, Fixnum, Hash)>] WorkV30 data, response status code and response headers
    def view_workv3_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Api.view_workv3 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Api.view_workv3"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Api.view_workv3"
      end
      # resource path
      local_var_path = '/v3.0/{orcid}/work/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkV30')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Api#view_workv3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

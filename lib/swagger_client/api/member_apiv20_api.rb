=begin
#ORCID Member

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: Latest

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class MemberAPIV20Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a notification
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [NotificationPermissionV20] :body 
    # @return [String]
    def add_permission_notification(orcid, opts = {})
      data, _status_code, _headers = add_permission_notification_with_http_info(orcid, opts)
      data
    end

    # Add a notification
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [NotificationPermissionV20] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def add_permission_notification_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.add_permission_notification ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.add_permission_notification"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/notification-permission'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#add_permission_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an address
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV20] :body 
    # @return [nil]
    def create_address(orcid, opts = {})
      create_address_with_http_info(orcid, opts)
      nil
    end

    # Add an address
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_address_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_address ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_address"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/address'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Education
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV20] :body 
    # @return [String]
    def create_education(orcid, opts = {})
      data, _status_code, _headers = create_education_with_http_info(orcid, opts)
      data
    end

    # Create an Education
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV20] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_education_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_education ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_education"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/education'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_education\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Employment
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV20] :body 
    # @return [String]
    def create_employment(orcid, opts = {})
      data, _status_code, _headers = create_employment_with_http_info(orcid, opts)
      data
    end

    # Create an Employment
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV20] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_employment_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_employment ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_employment"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/employment'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_employment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add external identifier
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV20] :body 
    # @return [nil]
    def create_external_identifier(orcid, opts = {})
      create_external_identifier_with_http_info(orcid, opts)
      nil
    end

    # Add external identifier
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_external_identifier_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_external_identifier ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_external_identifier"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/external-identifiers'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_external_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Funding
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV20] :body 
    # @return [String]
    def create_funding(orcid, opts = {})
      data, _status_code, _headers = create_funding_with_http_info(orcid, opts)
      data
    end

    # Create a Funding
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV20] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_funding_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_funding ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_funding"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/funding'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_funding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Group
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [nil]
    def create_group_id_record(opts = {})
      create_group_id_record_with_http_info(opts)
      nil
    end

    # Create a Group
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_group_id_record_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_group_id_record ...'
      end
      # resource path
      local_var_path = '/v2.0/group-id-record'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_group_id_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add keyword
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV20] :body 
    # @return [nil]
    def create_keyword(orcid, opts = {})
      create_keyword_with_http_info(orcid, opts)
      nil
    end

    # Add keyword
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_keyword_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_keyword ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_keyword"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/keywords'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_keyword\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add other name
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV20] :body 
    # @return [nil]
    def create_other_name(orcid, opts = {})
      create_other_name_with_http_info(orcid, opts)
      nil
    end

    # Add other name
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_other_name_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_other_name ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_other_name"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/other-names'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_other_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Peer Review
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV20] :body 
    # @return [String]
    def create_peer_review(orcid, opts = {})
      data, _status_code, _headers = create_peer_review_with_http_info(orcid, opts)
      data
    end

    # Create a Peer Review
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV20] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_peer_review_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_peer_review ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_peer_review"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/peer-review'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_peer_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a new researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV20] :body 
    # @return [nil]
    def create_researcher_url(orcid, opts = {})
      create_researcher_url_with_http_info(orcid, opts)
      nil
    end

    # Add a new researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_researcher_url_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_researcher_url ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_researcher_url"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/researcher-urls'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_researcher_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Work
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV20] :body 
    # @return [String]
    def create_work(orcid, opts = {})
      data, _status_code, _headers = create_work_with_http_info(orcid, opts)
      data
    end

    # Create a Work
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV20] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_work_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_work ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_work"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/work'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_work\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a list of Work
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkBulkV20] :body 
    # @return [nil]
    def create_works(orcid, opts = {})
      create_works_with_http_info(orcid, opts)
      nil
    end

    # Create a list of Work
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkBulkV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_works_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.create_works ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.create_works"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/works'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#create_works\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_address(orcid, put_code, opts = {})
      delete_address_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_address_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_address ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.delete_address"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_address"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/address/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_education(orcid, put_code, opts = {})
      delete_education_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_education_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_education ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.delete_education"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_education"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/education/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_education\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_employment(orcid, put_code, opts = {})
      delete_employment_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_employment_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_employment ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.delete_employment"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_employment"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/employment/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_employment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_external_identifier(orcid, put_code, opts = {})
      delete_external_identifier_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_external_identifier_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_external_identifier ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.delete_external_identifier"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_external_identifier"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/external-identifiers/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_external_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_funding(orcid, put_code, opts = {})
      delete_funding_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_funding_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_funding ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.delete_funding"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_funding"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/funding/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_funding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_id_record(put_code, opts = {})
      delete_group_id_record_with_http_info(put_code, opts)
      nil
    end

    # Delete a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_id_record_with_http_info(put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_group_id_record ...'
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_group_id_record"
      end
      # resource path
      local_var_path = '/v2.0/group-id-record/{putCode}'.sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_group_id_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_keyword(orcid, put_code, opts = {})
      delete_keyword_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_keyword_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_keyword ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.delete_keyword"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_keyword"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/keywords/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_keyword\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_other_name(orcid, put_code, opts = {})
      delete_other_name_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_other_name_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_other_name ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.delete_other_name"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_other_name"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/other-names/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_other_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_peer_review(orcid, put_code, opts = {})
      delete_peer_review_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_peer_review_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_peer_review ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.delete_peer_review"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_peer_review"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/peer-review/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_peer_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete one researcher url from an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_researcher_url(orcid, put_code, opts = {})
      delete_researcher_url_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete one researcher url from an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_researcher_url_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_researcher_url ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.delete_researcher_url"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_researcher_url"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/researcher-urls/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_researcher_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_work(orcid, put_code, opts = {})
      delete_work_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_work_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.delete_work ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.delete_work"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.delete_work"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/work/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#delete_work\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV20] :body 
    # @return [nil]
    def edit_address(orcid, put_code, opts = {})
      edit_address_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_address_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.edit_address ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.edit_address"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.edit_address"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/address/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#edit_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV20] :body 
    # @return [nil]
    def edit_external_identifier(orcid, put_code, opts = {})
      edit_external_identifier_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_external_identifier_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.edit_external_identifier ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.edit_external_identifier"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.edit_external_identifier"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/external-identifiers/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#edit_external_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV20] :body 
    # @return [nil]
    def edit_keyword(orcid, put_code, opts = {})
      edit_keyword_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_keyword_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.edit_keyword ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.edit_keyword"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.edit_keyword"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/keywords/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#edit_keyword\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV20] :body 
    # @return [nil]
    def edit_other_name(orcid, put_code, opts = {})
      edit_other_name_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_other_name_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.edit_other_name ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.edit_other_name"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.edit_other_name"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/other-names/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#edit_other_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV20] :body 
    # @return [nil]
    def edit_researcher_url(orcid, put_code, opts = {})
      edit_researcher_url_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edits researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_researcher_url_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.edit_researcher_url ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.edit_researcher_url"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.edit_researcher_url"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/researcher-urls/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#edit_researcher_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Archive a notification
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def flag_as_archived_permission_notification(orcid, id, opts = {})
      data, _status_code, _headers = flag_as_archived_permission_notification_with_http_info(orcid, id, opts)
      data
    end

    # Archive a notification
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Fixnum, Hash)>] Notification data, response status code and response headers
    def flag_as_archived_permission_notification_with_http_info(orcid, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.flag_as_archived_permission_notification ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.flag_as_archived_permission_notification"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MemberAPIV20Api.flag_as_archived_permission_notification"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/notification-permission/{id}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Notification')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#flag_as_archived_permission_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [SearchV20]
    def search_by_query(opts = {})
      data, _status_code, _headers = search_by_query_with_http_info(opts)
      data
    end

    # Search records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [Array<(SearchV20, Fixnum, Hash)>] SearchV20 data, response status code and response headers
    def search_by_query_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.search_by_query ...'
      end
      # resource path
      local_var_path = '/v2.0/search'

      # query parameters
      query_params = {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#search_by_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV20] :body 
    # @return [nil]
    def update_education(orcid, put_code, opts = {})
      update_education_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_education_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.update_education ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.update_education"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.update_education"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/education/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#update_education\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV20] :body 
    # @return [nil]
    def update_employment(orcid, put_code, opts = {})
      update_employment_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_employment_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.update_employment ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.update_employment"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.update_employment"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/employment/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#update_employment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV20] :body 
    # @return [nil]
    def update_funding(orcid, put_code, opts = {})
      update_funding_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_funding_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.update_funding ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.update_funding"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.update_funding"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/funding/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#update_funding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [nil]
    def update_group_id_record(put_code, opts = {})
      update_group_id_record_with_http_info(put_code, opts)
      nil
    end

    # Update a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_group_id_record_with_http_info(put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.update_group_id_record ...'
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.update_group_id_record"
      end
      # resource path
      local_var_path = '/v2.0/group-id-record/{putCode}'.sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#update_group_id_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV20] :body 
    # @return [nil]
    def update_peer_review(orcid, put_code, opts = {})
      update_peer_review_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_peer_review_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.update_peer_review ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.update_peer_review"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.update_peer_review"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/peer-review/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#update_peer_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV20] :body 
    # @return [nil]
    def update_work(orcid, put_code, opts = {})
      update_work_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV20] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_work_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.update_work ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.update_work"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.update_work"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/work/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#update_work\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all activities
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [ActivitiesSummaryV20]
    def view_activities(orcid, opts = {})
      data, _status_code, _headers = view_activities_with_http_info(orcid, opts)
      data
    end

    # Fetch all activities
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivitiesSummaryV20, Fixnum, Hash)>] ActivitiesSummaryV20 data, response status code and response headers
    def view_activities_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_activities ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_activities"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/activities'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ActivitiesSummaryV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [AddressV20]
    def view_address(orcid, put_code, opts = {})
      data, _status_code, _headers = view_address_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressV20, Fixnum, Hash)>] AddressV20 data, response status code and response headers
    def view_address_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_address ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_address"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_address"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/address/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddressV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all addresses of a profile
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [AddressesV20]
    def view_addresses(orcid, opts = {})
      data, _status_code, _headers = view_addresses_with_http_info(orcid, opts)
      data
    end

    # Fetch all addresses of a profile
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressesV20, Fixnum, Hash)>] AddressesV20 data, response status code and response headers
    def view_addresses_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_addresses ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_addresses"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/address'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddressesV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get biography details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [BiographyV20]
    def view_biography(orcid, opts = {})
      data, _status_code, _headers = view_biography_with_http_info(orcid, opts)
      data
    end

    # Get biography details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BiographyV20, Fixnum, Hash)>] BiographyV20 data, response status code and response headers
    def view_biography_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_biography ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_biography"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/biography'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BiographyV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_biography\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch client details
    # 
    # @param client_id 
    # @param [Hash] opts the optional parameters
    # @return [ClientSummary]
    def view_client(client_id, opts = {})
      data, _status_code, _headers = view_client_with_http_info(client_id, opts)
      data
    end

    # Fetch client details
    # 
    # @param client_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientSummary, Fixnum, Hash)>] ClientSummary data, response status code and response headers
    def view_client_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_client ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling MemberAPIV20Api.view_client"
      end
      if @api_client.config.client_side_validation && client_id !~ Regexp.new(/[^\/]+/)
        fail ArgumentError, "invalid value for 'client_id' when calling MemberAPIV20Api.view_client, must conform to the pattern /[^\/]+/."
      end

      # resource path
      local_var_path = '/v2.0/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientSummary')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EducationV20]
    def view_education(orcid, put_code, opts = {})
      data, _status_code, _headers = view_education_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationV20, Fixnum, Hash)>] EducationV20 data, response status code and response headers
    def view_education_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_education ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_education"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_education"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/education/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_education\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Education summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EducationSummaryV20]
    def view_education_summary(orcid, put_code, opts = {})
      data, _status_code, _headers = view_education_summary_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Education summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationSummaryV20, Fixnum, Hash)>] EducationSummaryV20 data, response status code and response headers
    def view_education_summary_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_education_summary ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_education_summary"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_education_summary"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/education/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationSummaryV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_education_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all educations
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [EducationsSummaryV20]
    def view_educations(orcid, opts = {})
      data, _status_code, _headers = view_educations_with_http_info(orcid, opts)
      data
    end

    # Fetch all educations
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationsSummaryV20, Fixnum, Hash)>] EducationsSummaryV20 data, response status code and response headers
    def view_educations_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_educations ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_educations"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/educations'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationsSummaryV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_educations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all emails for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [EmailsV20]
    def view_emails(orcid, opts = {})
      data, _status_code, _headers = view_emails_with_http_info(orcid, opts)
      data
    end

    # Fetch all emails for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailsV20, Fixnum, Hash)>] EmailsV20 data, response status code and response headers
    def view_emails_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_emails ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_emails"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/email'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailsV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EmploymentV20]
    def view_employment(orcid, put_code, opts = {})
      data, _status_code, _headers = view_employment_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmploymentV20, Fixnum, Hash)>] EmploymentV20 data, response status code and response headers
    def view_employment_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_employment ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_employment"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_employment"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/employment/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmploymentV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_employment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Employment Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EmploymentSummaryV20]
    def view_employment_summary(orcid, put_code, opts = {})
      data, _status_code, _headers = view_employment_summary_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Employment Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmploymentSummaryV20, Fixnum, Hash)>] EmploymentSummaryV20 data, response status code and response headers
    def view_employment_summary_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_employment_summary ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_employment_summary"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_employment_summary"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/employment/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmploymentSummaryV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_employment_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all employments
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [EmploymentsSummaryV20]
    def view_employments(orcid, opts = {})
      data, _status_code, _headers = view_employments_with_http_info(orcid, opts)
      data
    end

    # Fetch all employments
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmploymentsSummaryV20, Fixnum, Hash)>] EmploymentsSummaryV20 data, response status code and response headers
    def view_employments_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_employments ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_employments"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/employments'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmploymentsSummaryV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_employments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [PersonExternalIdentifierV20]
    def view_external_identifier(orcid, put_code, opts = {})
      data, _status_code, _headers = view_external_identifier_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonExternalIdentifierV20, Fixnum, Hash)>] PersonExternalIdentifierV20 data, response status code and response headers
    def view_external_identifier_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_external_identifier ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_external_identifier"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_external_identifier"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/external-identifiers/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PersonExternalIdentifierV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_external_identifier\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch external identifiers
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [PersonExternalIdentifiersV20]
    def view_external_identifiers(orcid, opts = {})
      data, _status_code, _headers = view_external_identifiers_with_http_info(orcid, opts)
      data
    end

    # Fetch external identifiers
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonExternalIdentifiersV20, Fixnum, Hash)>] PersonExternalIdentifiersV20 data, response status code and response headers
    def view_external_identifiers_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_external_identifiers ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_external_identifiers"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/external-identifiers'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PersonExternalIdentifiersV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_external_identifiers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [FundingV20]
    def view_funding(orcid, put_code, opts = {})
      data, _status_code, _headers = view_funding_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingV20, Fixnum, Hash)>] FundingV20 data, response status code and response headers
    def view_funding_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_funding ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_funding"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_funding"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/funding/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_funding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Funding Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [FundingSummaryV20]
    def view_funding_summary(orcid, put_code, opts = {})
      data, _status_code, _headers = view_funding_summary_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Funding Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingSummaryV20, Fixnum, Hash)>] FundingSummaryV20 data, response status code and response headers
    def view_funding_summary_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_funding_summary ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_funding_summary"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_funding_summary"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/funding/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingSummaryV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_funding_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all fundings
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [FundingsV20]
    def view_fundings(orcid, opts = {})
      data, _status_code, _headers = view_fundings_with_http_info(orcid, opts)
      data
    end

    # Fetch all fundings
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingsV20, Fixnum, Hash)>] FundingsV20 data, response status code and response headers
    def view_fundings_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_fundings ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_fundings"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/fundings'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingsV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_fundings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [GroupIdRecord]
    def view_group_id_record(put_code, opts = {})
      data, _status_code, _headers = view_group_id_record_with_http_info(put_code, opts)
      data
    end

    # Fetch a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupIdRecord, Fixnum, Hash)>] GroupIdRecord data, response status code and response headers
    def view_group_id_record_with_http_info(put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_group_id_record ...'
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_group_id_record"
      end
      # resource path
      local_var_path = '/v2.0/group-id-record/{putCode}'.sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupIdRecord')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_group_id_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Groups
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_size  (default to 100)
    # @option opts [String] :page  (default to 1)
    # @option opts [String] :name 
    # @option opts [String] :group_id 
    # @return [GroupIdRecords]
    def view_group_id_records(opts = {})
      data, _status_code, _headers = view_group_id_records_with_http_info(opts)
      data
    end

    # Fetch Groups
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_size 
    # @option opts [String] :page 
    # @option opts [String] :name 
    # @option opts [String] :group_id 
    # @return [Array<(GroupIdRecords, Fixnum, Hash)>] GroupIdRecords data, response status code and response headers
    def view_group_id_records_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_group_id_records ...'
      end
      # resource path
      local_var_path = '/v2.0/group-id-record'

      # query parameters
      query_params = {}
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'group-id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupIdRecords')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_group_id_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [KeywordV20]
    def view_keyword(orcid, put_code, opts = {})
      data, _status_code, _headers = view_keyword_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KeywordV20, Fixnum, Hash)>] KeywordV20 data, response status code and response headers
    def view_keyword_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_keyword ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_keyword"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_keyword"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/keywords/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KeywordV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_keyword\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch keywords
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [KeywordsV20]
    def view_keywords(orcid, opts = {})
      data, _status_code, _headers = view_keywords_with_http_info(orcid, opts)
      data
    end

    # Fetch keywords
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KeywordsV20, Fixnum, Hash)>] KeywordsV20 data, response status code and response headers
    def view_keywords_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_keywords ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_keywords"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/keywords'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KeywordsV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_keywords\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [OtherNameV20]
    def view_other_name(orcid, put_code, opts = {})
      data, _status_code, _headers = view_other_name_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch Other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OtherNameV20, Fixnum, Hash)>] OtherNameV20 data, response status code and response headers
    def view_other_name_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_other_name ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_other_name"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_other_name"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/other-names/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OtherNameV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_other_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Other names
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [OtherNamesV20]
    def view_other_names(orcid, opts = {})
      data, _status_code, _headers = view_other_names_with_http_info(orcid, opts)
      data
    end

    # Fetch Other names
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OtherNamesV20, Fixnum, Hash)>] OtherNamesV20 data, response status code and response headers
    def view_other_names_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_other_names ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_other_names"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/other-names'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OtherNamesV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_other_names\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [PeerReviewV20]
    def view_peer_review(orcid, put_code, opts = {})
      data, _status_code, _headers = view_peer_review_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerReviewV20, Fixnum, Hash)>] PeerReviewV20 data, response status code and response headers
    def view_peer_review_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_peer_review ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_peer_review"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_peer_review"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/peer-review/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PeerReviewV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_peer_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Peer Review Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [PeerReviewSummaryV20]
    def view_peer_review_summary(orcid, put_code, opts = {})
      data, _status_code, _headers = view_peer_review_summary_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Peer Review Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerReviewSummaryV20, Fixnum, Hash)>] PeerReviewSummaryV20 data, response status code and response headers
    def view_peer_review_summary_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_peer_review_summary ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_peer_review_summary"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_peer_review_summary"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/peer-review/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PeerReviewSummaryV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_peer_review_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all peer reviews
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [PeerReviewsV20]
    def view_peer_reviews(orcid, opts = {})
      data, _status_code, _headers = view_peer_reviews_with_http_info(orcid, opts)
      data
    end

    # Fetch all peer reviews
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerReviewsV20, Fixnum, Hash)>] PeerReviewsV20 data, response status code and response headers
    def view_peer_reviews_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_peer_reviews ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_peer_reviews"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/peer-reviews'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PeerReviewsV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_peer_reviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a notification by id
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def view_permission_notification(orcid, id, opts = {})
      data, _status_code, _headers = view_permission_notification_with_http_info(orcid, id, opts)
      data
    end

    # Fetch a notification by id
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Fixnum, Hash)>] Notification data, response status code and response headers
    def view_permission_notification_with_http_info(orcid, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_permission_notification ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_permission_notification"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MemberAPIV20Api.view_permission_notification"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/notification-permission/{id}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Notification')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_permission_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch person details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [PersonV20]
    def view_person(orcid, opts = {})
      data, _status_code, _headers = view_person_with_http_info(orcid, opts)
      data
    end

    # Fetch person details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonV20, Fixnum, Hash)>] PersonV20 data, response status code and response headers
    def view_person_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_person ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_person"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/person'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PersonV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch personal details for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [PersonalDetailsV20]
    def view_personal_details(orcid, opts = {})
      data, _status_code, _headers = view_personal_details_with_http_info(orcid, opts)
      data
    end

    # Fetch personal details for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalDetailsV20, Fixnum, Hash)>] PersonalDetailsV20 data, response status code and response headers
    def view_personal_details_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_personal_details ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_personal_details"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/personal-details'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PersonalDetailsV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_personal_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch record details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [RecordV20]
    def view_record(orcid, opts = {})
      data, _status_code, _headers = view_record_with_http_info(orcid, opts)
      data
    end

    # Fetch record details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecordV20, Fixnum, Hash)>] RecordV20 data, response status code and response headers
    def view_record_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_record ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_record"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecordV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch one researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [ResearcherUrlsV20]
    def view_researcher_url(orcid, put_code, opts = {})
      data, _status_code, _headers = view_researcher_url_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch one researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResearcherUrlsV20, Fixnum, Hash)>] ResearcherUrlsV20 data, response status code and response headers
    def view_researcher_url_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_researcher_url ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_researcher_url"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_researcher_url"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/researcher-urls/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResearcherUrlsV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_researcher_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all researcher urls for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [ResearcherUrlsV20]
    def view_researcher_urls(orcid, opts = {})
      data, _status_code, _headers = view_researcher_urls_with_http_info(orcid, opts)
      data
    end

    # Fetch all researcher urls for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResearcherUrlsV20, Fixnum, Hash)>] ResearcherUrlsV20 data, response status code and response headers
    def view_researcher_urls_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_researcher_urls ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_researcher_urls"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/researcher-urls'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResearcherUrlsV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_researcher_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch specified works
    # 
    # @param orcid 
    # @param put_codes 
    # @param [Hash] opts the optional parameters
    # @return [WorkBulkV20]
    def view_specified_works(orcid, put_codes, opts = {})
      data, _status_code, _headers = view_specified_works_with_http_info(orcid, put_codes, opts)
      data
    end

    # Fetch specified works
    # 
    # @param orcid 
    # @param put_codes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkBulkV20, Fixnum, Hash)>] WorkBulkV20 data, response status code and response headers
    def view_specified_works_with_http_info(orcid, put_codes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_specified_works ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_specified_works"
      end
      # verify the required parameter 'put_codes' is set
      if @api_client.config.client_side_validation && put_codes.nil?
        fail ArgumentError, "Missing the required parameter 'put_codes' when calling MemberAPIV20Api.view_specified_works"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/works/{putCodes}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCodes' + '}', put_codes.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkBulkV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_specified_works\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [WorkV20]
    def view_work(orcid, put_code, opts = {})
      data, _status_code, _headers = view_work_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkV20, Fixnum, Hash)>] WorkV20 data, response status code and response headers
    def view_work_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_work ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_work"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_work"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/work/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_work\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Work Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [WorkSummaryV20]
    def view_work_summary(orcid, put_code, opts = {})
      data, _status_code, _headers = view_work_summary_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Work Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkSummaryV20, Fixnum, Hash)>] WorkSummaryV20 data, response status code and response headers
    def view_work_summary_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_work_summary ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_work_summary"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling MemberAPIV20Api.view_work_summary"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/work/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkSummaryV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_work_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all works
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [WorksSummaryV20]
    def view_works(orcid, opts = {})
      data, _status_code, _headers = view_works_with_http_info(orcid, opts)
      data
    end

    # Fetch all works
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorksSummaryV20, Fixnum, Hash)>] WorksSummaryV20 data, response status code and response headers
    def view_works_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MemberAPIV20Api.view_works ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling MemberAPIV20Api.view_works"
      end
      # resource path
      local_var_path = '/v2.0/{orcid}/works'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksSummaryV20')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MemberAPIV20Api#view_works\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

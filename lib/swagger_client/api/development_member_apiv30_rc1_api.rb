=begin
#ORCID Member

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: Latest

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module SwaggerClient
  class DevelopmentMemberAPIV30Rc1Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a notification
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [NotificationPermissionV30Rc1] :body 
    # @return [String]
    def add_permission_notification_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = add_permission_notification_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Add a notification
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [NotificationPermissionV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def add_permission_notification_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.add_permission_notification_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.add_permission_notification_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/notification-permission'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#add_permission_notification_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an address
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV30Rc1] :body 
    # @return [nil]
    def create_address_v3_rc1(orcid, opts = {})
      create_address_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Add an address
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_address_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_address_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_address_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/address'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_address_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Distinction
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [DistinctionV30Rc1] :body 
    # @return [String]
    def create_distinction_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_distinction_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create an Distinction
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [DistinctionV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_distinction_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_distinction_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_distinction_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/distinction'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_distinction_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Education
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV30Rc1] :body 
    # @return [String]
    def create_education_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_education_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create an Education
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_education_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_education_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_education_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/education'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_education_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Employment
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV30Rc1] :body 
    # @return [String]
    def create_employment_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_employment_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create an Employment
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_employment_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_employment_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_employment_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/employment'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_employment_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add external identifier
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV30Rc1] :body 
    # @return [nil]
    def create_external_identifier_v3_rc1(orcid, opts = {})
      create_external_identifier_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Add external identifier
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_external_identifier_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_external_identifier_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_external_identifier_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/external-identifiers'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_external_identifier_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Funding
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV30Rc1] :body 
    # @return [String]
    def create_funding_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_funding_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create a Funding
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_funding_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_funding_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_funding_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/funding'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_funding_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Group
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [nil]
    def create_group_id_record_v3_rc1(opts = {})
      create_group_id_record_v3_rc1_with_http_info(opts)
      nil
    end

    # Create a Group
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_group_id_record_v3_rc1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_group_id_record_v3_rc1 ...'
      end
      # resource path
      local_var_path = '/v3.0_rc1/group-id-record'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_group_id_record_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an InvitedPosition
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [InvitedPositionV30Rc1] :body 
    # @return [String]
    def create_invited_position_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_invited_position_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create an InvitedPosition
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [InvitedPositionV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_invited_position_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_invited_position_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_invited_position_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/invited-position'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_invited_position_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add keyword
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV30Rc1] :body 
    # @return [nil]
    def create_keyword_v3_rc1(orcid, opts = {})
      create_keyword_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Add keyword
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_keyword_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_keyword_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_keyword_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/keywords'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_keyword_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Membership
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [MembershipV30Rc1] :body 
    # @return [String]
    def create_membership_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_membership_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create an Membership
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [MembershipV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_membership_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_membership_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_membership_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/membership'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_membership_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add other name
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV30Rc1] :body 
    # @return [nil]
    def create_other_name_v3_rc1(orcid, opts = {})
      create_other_name_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Add other name
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_other_name_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_other_name_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_other_name_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/other-names'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_other_name_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Peer Review
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV30Rc1] :body 
    # @return [String]
    def create_peer_review_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_peer_review_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create a Peer Review
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_peer_review_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_peer_review_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_peer_review_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/peer-review'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_peer_review_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Qualification
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [QualificationV30Rc1] :body 
    # @return [String]
    def create_qualification_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_qualification_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create an Qualification
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [QualificationV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_qualification_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_qualification_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_qualification_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/qualification'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_qualification_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Research Resource
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearchResourceV30Rc1] :body 
    # @return [String]
    def create_research_resource_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_research_resource_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create a Research Resource
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearchResourceV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_research_resource_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_research_resource_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_research_resource_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/research-resource'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_research_resource_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a new researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV30Rc1] :body 
    # @return [nil]
    def create_researcher_url_v3_rc1(orcid, opts = {})
      create_researcher_url_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Add a new researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_researcher_url_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_researcher_url_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_researcher_url_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/researcher-urls'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_researcher_url_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an Service
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceV30Rc1] :body 
    # @return [String]
    def create_service_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_service_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create an Service
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_service_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_service_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_service_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/service'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_service_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Work
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV30Rc1] :body 
    # @return [String]
    def create_work_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_work_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create a Work
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV30Rc1] :body 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_work_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_work_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_work_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/work'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_work_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a list of Works
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkBulkV30Rc1] :body 
    # @return [WorkBulkV30Rc1]
    def create_works_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = create_works_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Create a list of Works
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkBulkV30Rc1] :body 
    # @return [Array<(WorkBulkV30Rc1, Fixnum, Hash)>] WorkBulkV30Rc1 data, response status code and response headers
    def create_works_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.create_works_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.create_works_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/works'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkBulkV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#create_works_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_address_v3_rc1(orcid, put_code, opts = {})
      delete_address_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_address_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_address_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_address_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_address_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/address/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_address_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_distinction_v3_rc1(orcid, put_code, opts = {})
      delete_distinction_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_distinction_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_distinction_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_distinction_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_distinction_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/distinction/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_distinction_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_education_v3_rc1(orcid, put_code, opts = {})
      delete_education_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_education_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_education_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_education_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_education_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/education/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_education_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_employment_v3_rc1(orcid, put_code, opts = {})
      delete_employment_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_employment_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_employment_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_employment_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_employment_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/employment/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_employment_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_external_identifier_v3_rc1(orcid, put_code, opts = {})
      delete_external_identifier_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_external_identifier_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_external_identifier_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_external_identifier_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_external_identifier_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/external-identifiers/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_external_identifier_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_funding_v3_rc1(orcid, put_code, opts = {})
      delete_funding_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_funding_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_funding_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_funding_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_funding_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/funding/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_funding_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_id_record_v3_rc1(put_code, opts = {})
      delete_group_id_record_v3_rc1_with_http_info(put_code, opts)
      nil
    end

    # Delete a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_group_id_record_v3_rc1_with_http_info(put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_group_id_record_v3_rc1 ...'
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_group_id_record_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/group-id-record/{putCode}'.sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_group_id_record_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_invited_position_v3_rc1(orcid, put_code, opts = {})
      delete_invited_position_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_invited_position_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_invited_position_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_invited_position_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_invited_position_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/invited-position/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_invited_position_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_keyword_v3_rc1(orcid, put_code, opts = {})
      delete_keyword_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_keyword_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_keyword_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_keyword_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_keyword_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/keywords/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_keyword_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_membership_v3_rc1(orcid, put_code, opts = {})
      delete_membership_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_membership_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_membership_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_membership_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_membership_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/membership/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_membership_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_other_name_v3_rc1(orcid, put_code, opts = {})
      delete_other_name_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_other_name_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_other_name_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_other_name_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_other_name_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/other-names/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_other_name_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_peer_review_v3_rc1(orcid, put_code, opts = {})
      delete_peer_review_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_peer_review_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_peer_review_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_peer_review_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_peer_review_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/peer-review/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_peer_review_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_qualification_v3_rc1(orcid, put_code, opts = {})
      delete_qualification_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_qualification_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_qualification_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_qualification_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_qualification_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/qualification/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_qualification_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_research_resource_v3_rc1(orcid, put_code, opts = {})
      delete_research_resource_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_research_resource_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_research_resource_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_research_resource_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_research_resource_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/research-resource/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_research_resource_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete one researcher url from an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_researcher_url_v3_rc1(orcid, put_code, opts = {})
      delete_researcher_url_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete one researcher url from an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_researcher_url_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_researcher_url_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_researcher_url_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_researcher_url_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/researcher-urls/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_researcher_url_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_service_v3_rc1(orcid, put_code, opts = {})
      delete_service_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_service_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_service_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_service_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_service_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/service/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_service_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_work_v3_rc1(orcid, put_code, opts = {})
      delete_work_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Delete a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_work_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.delete_work_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.delete_work_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.delete_work_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/work/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#delete_work_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV30Rc1] :body 
    # @return [nil]
    def edit_address_v3_rc1(orcid, put_code, opts = {})
      edit_address_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [AddressV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_address_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.edit_address_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.edit_address_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.edit_address_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/address/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#edit_address_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV30Rc1] :body 
    # @return [nil]
    def edit_external_identifier_v3_rc1(orcid, put_code, opts = {})
      edit_external_identifier_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PersonExternalIdentifierV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_external_identifier_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.edit_external_identifier_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.edit_external_identifier_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.edit_external_identifier_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/external-identifiers/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#edit_external_identifier_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV30Rc1] :body 
    # @return [nil]
    def edit_keyword_v3_rc1(orcid, put_code, opts = {})
      edit_keyword_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_keyword_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.edit_keyword_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.edit_keyword_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.edit_keyword_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/keywords/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#edit_keyword_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV30Rc1] :body 
    # @return [nil]
    def edit_other_name_v3_rc1(orcid, put_code, opts = {})
      edit_other_name_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edit other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [OtherNameV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_other_name_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.edit_other_name_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.edit_other_name_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.edit_other_name_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/other-names/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#edit_other_name_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV30Rc1] :body 
    # @return [nil]
    def edit_researcher_url_v3_rc1(orcid, put_code, opts = {})
      edit_researcher_url_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Edits researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearcherUrlV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_researcher_url_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.edit_researcher_url_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.edit_researcher_url_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.edit_researcher_url_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/researcher-urls/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#edit_researcher_url_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Archive a notification
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def flag_as_archived_permission_notification_v3_rc1(orcid, id, opts = {})
      data, _status_code, _headers = flag_as_archived_permission_notification_v3_rc1_with_http_info(orcid, id, opts)
      data
    end

    # Archive a notification
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Fixnum, Hash)>] Notification data, response status code and response headers
    def flag_as_archived_permission_notification_v3_rc1_with_http_info(orcid, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.flag_as_archived_permission_notification_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.flag_as_archived_permission_notification_v3_rc1"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DevelopmentMemberAPIV30Rc1Api.flag_as_archived_permission_notification_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/notification-permission/{id}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Notification')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#flag_as_archived_permission_notification_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [SearchV30Rc1]
    def search_by_query_v3_rc1(opts = {})
      data, _status_code, _headers = search_by_query_v3_rc1_with_http_info(opts)
      data
    end

    # Search records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q 
    # @return [Array<(SearchV30Rc1, Fixnum, Hash)>] SearchV30Rc1 data, response status code and response headers
    def search_by_query_v3_rc1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.search_by_query_v3_rc1 ...'
      end
      # resource path
      local_var_path = '/v3.0_rc1/search'

      # query parameters
      query_params = {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SearchV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#search_by_query_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [DistinctionV30Rc1] :body 
    # @return [nil]
    def update_distinction_v3_rc1(orcid, put_code, opts = {})
      update_distinction_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [DistinctionV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_distinction_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_distinction_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_distinction_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_distinction_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/distinction/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_distinction_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV30Rc1] :body 
    # @return [nil]
    def update_education_v3_rc1(orcid, put_code, opts = {})
      update_education_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EducationV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_education_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_education_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_education_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_education_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/education/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_education_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV30Rc1] :body 
    # @return [nil]
    def update_employment_v3_rc1(orcid, put_code, opts = {})
      update_employment_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [EmploymentV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_employment_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_employment_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_employment_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_employment_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/employment/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_employment_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV30Rc1] :body 
    # @return [nil]
    def update_funding_v3_rc1(orcid, put_code, opts = {})
      update_funding_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [FundingV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_funding_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_funding_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_funding_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_funding_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/funding/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_funding_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [nil]
    def update_group_id_record_v3_rc1(put_code, opts = {})
      update_group_id_record_v3_rc1_with_http_info(put_code, opts)
      nil
    end

    # Update a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [GroupIdRecord] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_group_id_record_v3_rc1_with_http_info(put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_group_id_record_v3_rc1 ...'
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_group_id_record_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/group-id-record/{putCode}'.sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_group_id_record_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [InvitedPositionV30Rc1] :body 
    # @return [nil]
    def update_invited_position_v3_rc1(orcid, put_code, opts = {})
      update_invited_position_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [InvitedPositionV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_invited_position_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_invited_position_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_invited_position_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_invited_position_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/invited-position/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_invited_position_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [MembershipV30Rc1] :body 
    # @return [nil]
    def update_membership_v3_rc1(orcid, put_code, opts = {})
      update_membership_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [MembershipV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_membership_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_membership_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_membership_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_membership_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/membership/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_membership_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV30Rc1] :body 
    # @return [nil]
    def update_peer_review_v3_rc1(orcid, put_code, opts = {})
      update_peer_review_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [PeerReviewV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_peer_review_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_peer_review_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_peer_review_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_peer_review_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/peer-review/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_peer_review_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [QualificationV30Rc1] :body 
    # @return [nil]
    def update_qualification_v3_rc1(orcid, put_code, opts = {})
      update_qualification_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [QualificationV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_qualification_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_qualification_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_qualification_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_qualification_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/qualification/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_qualification_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearchResourceV30Rc1] :body 
    # @return [nil]
    def update_research_resource_v3_rc1(orcid, put_code, opts = {})
      update_research_resource_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ResearchResourceV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_research_resource_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_research_resource_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_research_resource_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_research_resource_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/research-resource/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_research_resource_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceV30Rc1] :body 
    # @return [nil]
    def update_service_v3_rc1(orcid, put_code, opts = {})
      update_service_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_service_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_service_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_service_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_service_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/service/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_service_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV30Rc1] :body 
    # @return [nil]
    def update_work_v3_rc1(orcid, put_code, opts = {})
      update_work_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Update a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @option opts [WorkV30Rc1] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_work_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.update_work_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.update_work_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.update_work_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/work/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#update_work_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all activities
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [ActivitiesSummaryV30Rc1]
    def view_activities_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_activities_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all activities
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivitiesSummaryV30Rc1, Fixnum, Hash)>] ActivitiesSummaryV30Rc1 data, response status code and response headers
    def view_activities_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_activities_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_activities_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/activities'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ActivitiesSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_activities_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_address_v3_rc1(orcid, put_code, opts = {})
      view_address_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Fetch an address
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_address_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_address_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_address_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_address_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/address/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_address_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all addresses of a profile
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [AddressesV30Rc1]
    def view_addresses_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_addresses_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all addresses of a profile
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressesV30Rc1, Fixnum, Hash)>] AddressesV30Rc1 data, response status code and response headers
    def view_addresses_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_addresses_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_addresses_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/address'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddressesV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_addresses_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get biography details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [BiographyV30Rc1]
    def view_biography_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_biography_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Get biography details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BiographyV30Rc1, Fixnum, Hash)>] BiographyV30Rc1 data, response status code and response headers
    def view_biography_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_biography_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_biography_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/biography'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BiographyV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_biography_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch client details
    # 
    # @param client_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_client_v3_rc1(client_id, opts = {})
      view_client_v3_rc1_with_http_info(client_id, opts)
      nil
    end

    # Fetch client details
    # 
    # @param client_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_client_v3_rc1_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_client_v3_rc1 ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling DevelopmentMemberAPIV30Rc1Api.view_client_v3_rc1"
      end
      if @api_client.config.client_side_validation && client_id !~ Regexp.new(/[^\/]+/)
        fail ArgumentError, "invalid value for 'client_id' when calling DevelopmentMemberAPIV30Rc1Api.view_client_v3_rc1, must conform to the pattern /[^\/]+/."
      end

      # resource path
      local_var_path = '/v3.0_rc1/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_client_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Distinction summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [DistinctionSummaryV30Rc1]
    def view_distinction_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_distinction_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Distinction summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DistinctionSummaryV30Rc1, Fixnum, Hash)>] DistinctionSummaryV30Rc1 data, response status code and response headers
    def view_distinction_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_distinction_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_distinction_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_distinction_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/distinction/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DistinctionSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_distinction_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [DistinctionV30Rc1]
    def view_distinction_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_distinction_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Distinction
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DistinctionV30Rc1, Fixnum, Hash)>] DistinctionV30Rc1 data, response status code and response headers
    def view_distinction_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_distinction_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_distinction_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_distinction_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/distinction/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DistinctionV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_distinction_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all distinctions
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [DistinctionsV30Rc1]
    def view_distinctions_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_distinctions_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all distinctions
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DistinctionsV30Rc1, Fixnum, Hash)>] DistinctionsV30Rc1 data, response status code and response headers
    def view_distinctions_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_distinctions_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_distinctions_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/distinctions'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DistinctionsV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_distinctions_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Education summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EducationSummaryV30Rc1]
    def view_education_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_education_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Education summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationSummaryV30Rc1, Fixnum, Hash)>] EducationSummaryV30Rc1 data, response status code and response headers
    def view_education_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_education_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_education_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_education_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/education/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_education_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EducationV30Rc1]
    def view_education_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_education_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Education
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationV30Rc1, Fixnum, Hash)>] EducationV30Rc1 data, response status code and response headers
    def view_education_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_education_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_education_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_education_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/education/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_education_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all educations
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [EducationsSummaryV30Rc1]
    def view_educations_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_educations_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all educations
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationsSummaryV30Rc1, Fixnum, Hash)>] EducationsSummaryV30Rc1 data, response status code and response headers
    def view_educations_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_educations_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_educations_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/educations'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationsSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_educations_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all emails for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_emails_v3_rc1(orcid, opts = {})
      view_emails_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Fetch all emails for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_emails_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_emails_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_emails_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/email'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_emails_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Employment Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EmploymentSummaryV30Rc1]
    def view_employment_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_employment_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Employment Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmploymentSummaryV30Rc1, Fixnum, Hash)>] EmploymentSummaryV30Rc1 data, response status code and response headers
    def view_employment_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_employment_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_employment_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_employment_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/employment/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmploymentSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_employment_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [EmploymentV30Rc1]
    def view_employment_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_employment_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Employment
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmploymentV30Rc1, Fixnum, Hash)>] EmploymentV30Rc1 data, response status code and response headers
    def view_employment_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_employment_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_employment_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_employment_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/employment/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmploymentV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_employment_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all employments
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [EmploymentsSummaryV30Rc1]
    def view_employments_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_employments_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all employments
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmploymentsSummaryV30Rc1, Fixnum, Hash)>] EmploymentsSummaryV30Rc1 data, response status code and response headers
    def view_employments_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_employments_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_employments_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/employments'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmploymentsSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_employments_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_external_identifier_v3_rc1(orcid, put_code, opts = {})
      view_external_identifier_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Fetch external identifier
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_external_identifier_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_external_identifier_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_external_identifier_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_external_identifier_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/external-identifiers/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_external_identifier_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch external identifiers
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_external_identifiers_v3_rc1(orcid, opts = {})
      view_external_identifiers_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Fetch external identifiers
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_external_identifiers_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_external_identifiers_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_external_identifiers_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/external-identifiers'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_external_identifiers_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Funding Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [FundingSummaryV30Rc1]
    def view_funding_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_funding_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Funding Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingSummaryV30Rc1, Fixnum, Hash)>] FundingSummaryV30Rc1 data, response status code and response headers
    def view_funding_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_funding_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_funding_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_funding_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/funding/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_funding_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [FundingV30Rc1]
    def view_funding_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_funding_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Funding
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingV30Rc1, Fixnum, Hash)>] FundingV30Rc1 data, response status code and response headers
    def view_funding_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_funding_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_funding_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_funding_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/funding/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_funding_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all fundings
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [FundingsV30Rc1]
    def view_fundings_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_fundings_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all fundings
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingsV30Rc1, Fixnum, Hash)>] FundingsV30Rc1 data, response status code and response headers
    def view_fundings_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_fundings_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_fundings_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/fundings'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingsV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_fundings_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [GroupIdRecord]
    def view_group_id_record_v3_rc1(put_code, opts = {})
      data, _status_code, _headers = view_group_id_record_v3_rc1_with_http_info(put_code, opts)
      data
    end

    # Fetch a Group
    # 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupIdRecord, Fixnum, Hash)>] GroupIdRecord data, response status code and response headers
    def view_group_id_record_v3_rc1_with_http_info(put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_group_id_record_v3_rc1 ...'
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_group_id_record_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/group-id-record/{putCode}'.sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupIdRecord')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_group_id_record_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Groups
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_size  (default to 100)
    # @option opts [String] :page  (default to 1)
    # @option opts [String] :name 
    # @option opts [String] :group_id 
    # @return [GroupIdRecords]
    def view_group_id_records_v3_rc1(opts = {})
      data, _status_code, _headers = view_group_id_records_v3_rc1_with_http_info(opts)
      data
    end

    # Fetch Groups
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_size 
    # @option opts [String] :page 
    # @option opts [String] :name 
    # @option opts [String] :group_id 
    # @return [Array<(GroupIdRecords, Fixnum, Hash)>] GroupIdRecords data, response status code and response headers
    def view_group_id_records_v3_rc1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_group_id_records_v3_rc1 ...'
      end
      # resource path
      local_var_path = '/v3.0_rc1/group-id-record'

      # query parameters
      query_params = {}
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'group-id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GroupIdRecords')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_group_id_records_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an InvitedPosition summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [InvitedPositionSummaryV30Rc1]
    def view_invited_position_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_invited_position_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an InvitedPosition summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvitedPositionSummaryV30Rc1, Fixnum, Hash)>] InvitedPositionSummaryV30Rc1 data, response status code and response headers
    def view_invited_position_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_invited_position_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_invited_position_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_invited_position_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/invited-position/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitedPositionSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_invited_position_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [InvitedPositionV30Rc1]
    def view_invited_position_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_invited_position_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an InvitedPosition
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvitedPositionV30Rc1, Fixnum, Hash)>] InvitedPositionV30Rc1 data, response status code and response headers
    def view_invited_position_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_invited_position_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_invited_position_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_invited_position_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/invited-position/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitedPositionV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_invited_position_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all invitedPositions
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [InvitedPositionsV30Rc1]
    def view_invited_positions_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_invited_positions_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all invitedPositions
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvitedPositionsV30Rc1, Fixnum, Hash)>] InvitedPositionsV30Rc1 data, response status code and response headers
    def view_invited_positions_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_invited_positions_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_invited_positions_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/invited-positions'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitedPositionsV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_invited_positions_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_keyword_v3_rc1(orcid, put_code, opts = {})
      view_keyword_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Fetch keyword
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_keyword_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_keyword_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_keyword_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_keyword_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/keywords/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_keyword_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch keywords
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_keywords_v3_rc1(orcid, opts = {})
      view_keywords_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Fetch keywords
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_keywords_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_keywords_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_keywords_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/keywords'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_keywords_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Membership summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [MembershipSummaryV30Rc1]
    def view_membership_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_membership_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Membership summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembershipSummaryV30Rc1, Fixnum, Hash)>] MembershipSummaryV30Rc1 data, response status code and response headers
    def view_membership_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_membership_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_membership_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_membership_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/membership/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MembershipSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_membership_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [MembershipV30Rc1]
    def view_membership_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_membership_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Membership
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembershipV30Rc1, Fixnum, Hash)>] MembershipV30Rc1 data, response status code and response headers
    def view_membership_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_membership_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_membership_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_membership_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/membership/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MembershipV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_membership_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all memberships
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [MembershipsV30Rc1]
    def view_memberships_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_memberships_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all memberships
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MembershipsV30Rc1, Fixnum, Hash)>] MembershipsV30Rc1 data, response status code and response headers
    def view_memberships_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_memberships_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_memberships_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/memberships'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MembershipsV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_memberships_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_other_name_v3_rc1(orcid, put_code, opts = {})
      view_other_name_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Fetch Other name
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_other_name_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_other_name_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_other_name_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_other_name_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/other-names/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_other_name_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch Other names
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_other_names_v3_rc1(orcid, opts = {})
      view_other_names_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Fetch Other names
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_other_names_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_other_names_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_other_names_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/other-names'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_other_names_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Peer Review Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [PeerReviewSummaryV30Rc1]
    def view_peer_review_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_peer_review_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Peer Review Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerReviewSummaryV30Rc1, Fixnum, Hash)>] PeerReviewSummaryV30Rc1 data, response status code and response headers
    def view_peer_review_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_peer_review_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_peer_review_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_peer_review_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/peer-review/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PeerReviewSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_peer_review_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [PeerReviewV30Rc1]
    def view_peer_review_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_peer_review_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Peer Review
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerReviewV30Rc1, Fixnum, Hash)>] PeerReviewV30Rc1 data, response status code and response headers
    def view_peer_review_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_peer_review_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_peer_review_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_peer_review_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/peer-review/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PeerReviewV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_peer_review_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all peer reviews
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [PeerReviewsV30Rc1]
    def view_peer_reviews_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_peer_reviews_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all peer reviews
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PeerReviewsV30Rc1, Fixnum, Hash)>] PeerReviewsV30Rc1 data, response status code and response headers
    def view_peer_reviews_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_peer_reviews_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_peer_reviews_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/peer-reviews'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PeerReviewsV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_peer_reviews_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a notification by id
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Notification]
    def view_permission_notification_v3_rc1(orcid, id, opts = {})
      data, _status_code, _headers = view_permission_notification_v3_rc1_with_http_info(orcid, id, opts)
      data
    end

    # Fetch a notification by id
    # 
    # @param orcid 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notification, Fixnum, Hash)>] Notification data, response status code and response headers
    def view_permission_notification_v3_rc1_with_http_info(orcid, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_permission_notification_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_permission_notification_v3_rc1"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DevelopmentMemberAPIV30Rc1Api.view_permission_notification_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/notification-permission/{id}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_two_legs']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Notification')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_permission_notification_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch person details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_person_v3_rc1(orcid, opts = {})
      view_person_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Fetch person details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_person_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_person_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_person_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/person'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_person_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch personal details for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [PersonalDetailsV30Rc1]
    def view_personal_details_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_personal_details_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch personal details for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PersonalDetailsV30Rc1, Fixnum, Hash)>] PersonalDetailsV30Rc1 data, response status code and response headers
    def view_personal_details_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_personal_details_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_personal_details_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/personal-details'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PersonalDetailsV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_personal_details_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Qualification summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [QualificationSummaryV30Rc1]
    def view_qualification_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_qualification_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Qualification summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(QualificationSummaryV30Rc1, Fixnum, Hash)>] QualificationSummaryV30Rc1 data, response status code and response headers
    def view_qualification_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_qualification_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_qualification_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_qualification_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/qualification/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QualificationSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_qualification_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [QualificationV30Rc1]
    def view_qualification_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_qualification_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Qualification
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(QualificationV30Rc1, Fixnum, Hash)>] QualificationV30Rc1 data, response status code and response headers
    def view_qualification_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_qualification_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_qualification_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_qualification_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/qualification/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QualificationV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_qualification_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all qualifications
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [QualificationsV30Rc1]
    def view_qualifications_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_qualifications_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all qualifications
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(QualificationsV30Rc1, Fixnum, Hash)>] QualificationsV30Rc1 data, response status code and response headers
    def view_qualifications_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_qualifications_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_qualifications_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/qualifications'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QualificationsV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_qualifications_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch record details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [RecordV30Rc1]
    def view_record_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_record_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch record details
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecordV30Rc1, Fixnum, Hash)>] RecordV30Rc1 data, response status code and response headers
    def view_record_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_record_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_record_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecordV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_record_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Research Resource summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [ResearchResourceSummaryV30Rc1]
    def view_research_resource_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_research_resource_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Research Resource summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResearchResourceSummaryV30Rc1, Fixnum, Hash)>] ResearchResourceSummaryV30Rc1 data, response status code and response headers
    def view_research_resource_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_research_resource_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_research_resource_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_research_resource_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/research-resource/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResearchResourceSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_research_resource_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [ResearchResourceV30Rc1]
    def view_research_resource_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_research_resource_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Research Resource
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResearchResourceV30Rc1, Fixnum, Hash)>] ResearchResourceV30Rc1 data, response status code and response headers
    def view_research_resource_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_research_resource_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_research_resource_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_research_resource_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/research-resource/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResearchResourceV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_research_resource_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all Research Resources
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [ResearchResourcesV30Rc1]
    def view_research_resources_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_research_resources_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all Research Resources
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResearchResourcesV30Rc1, Fixnum, Hash)>] ResearchResourcesV30Rc1 data, response status code and response headers
    def view_research_resources_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_research_resources_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_research_resources_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/research-resources'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResearchResourcesV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_research_resources_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch one researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_researcher_url_v3_rc1(orcid, put_code, opts = {})
      view_researcher_url_v3_rc1_with_http_info(orcid, put_code, opts)
      nil
    end

    # Fetch one researcher url for an ORCID ID
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_researcher_url_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_researcher_url_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_researcher_url_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_researcher_url_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/researcher-urls/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_researcher_url_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all researcher urls for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_researcher_urls_v3_rc1(orcid, opts = {})
      view_researcher_urls_v3_rc1_with_http_info(orcid, opts)
      nil
    end

    # Fetch all researcher urls for an ORCID ID
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_researcher_urls_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_researcher_urls_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_researcher_urls_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/researcher-urls'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_researcher_urls_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Service summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [ServiceSummaryV30Rc1]
    def view_service_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_service_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Service summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceSummaryV30Rc1, Fixnum, Hash)>] ServiceSummaryV30Rc1 data, response status code and response headers
    def view_service_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_service_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_service_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_service_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/service/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_service_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [ServiceV30Rc1]
    def view_service_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_service_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch an Service
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServiceV30Rc1, Fixnum, Hash)>] ServiceV30Rc1 data, response status code and response headers
    def view_service_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_service_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_service_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_service_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/service/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_service_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all services
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [ServicesV30Rc1]
    def view_services_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_services_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all services
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ServicesV30Rc1, Fixnum, Hash)>] ServicesV30Rc1 data, response status code and response headers
    def view_services_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_services_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_services_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/services'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServicesV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_services_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch specified works
    # 
    # @param orcid 
    # @param put_codes 
    # @param [Hash] opts the optional parameters
    # @return [WorkBulkV30Rc1]
    def view_specified_works_v3_rc1(orcid, put_codes, opts = {})
      data, _status_code, _headers = view_specified_works_v3_rc1_with_http_info(orcid, put_codes, opts)
      data
    end

    # Fetch specified works
    # 
    # @param orcid 
    # @param put_codes 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkBulkV30Rc1, Fixnum, Hash)>] WorkBulkV30Rc1 data, response status code and response headers
    def view_specified_works_v3_rc1_with_http_info(orcid, put_codes, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_specified_works_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_specified_works_v3_rc1"
      end
      # verify the required parameter 'put_codes' is set
      if @api_client.config.client_side_validation && put_codes.nil?
        fail ArgumentError, "Missing the required parameter 'put_codes' when calling DevelopmentMemberAPIV30Rc1Api.view_specified_works_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/works/{putCodes}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCodes' + '}', put_codes.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkBulkV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_specified_works_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def view_status_json(opts = {})
      view_status_json_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def view_status_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_status_json ...'
      end
      # resource path
      local_var_path = '/v3.0_rc1/apiStatus'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_status_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Work Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [WorkSummaryV30Rc1]
    def view_work_summary_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_work_summary_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Work Summary
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkSummaryV30Rc1, Fixnum, Hash)>] WorkSummaryV30Rc1 data, response status code and response headers
    def view_work_summary_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_work_summary_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_work_summary_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_work_summary_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/work/summary/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_work_summary_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [WorkV30Rc1]
    def view_work_v3_rc1(orcid, put_code, opts = {})
      data, _status_code, _headers = view_work_v3_rc1_with_http_info(orcid, put_code, opts)
      data
    end

    # Fetch a Work
    # 
    # @param orcid 
    # @param put_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorkV30Rc1, Fixnum, Hash)>] WorkV30Rc1 data, response status code and response headers
    def view_work_v3_rc1_with_http_info(orcid, put_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_work_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_work_v3_rc1"
      end
      # verify the required parameter 'put_code' is set
      if @api_client.config.client_side_validation && put_code.nil?
        fail ArgumentError, "Missing the required parameter 'put_code' when calling DevelopmentMemberAPIV30Rc1Api.view_work_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/work/{putCode}'.sub('{' + 'orcid' + '}', orcid.to_s).sub('{' + 'putCode' + '}', put_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorkV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_work_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch all works
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [WorksSummaryV30Rc1]
    def view_works_v3_rc1(orcid, opts = {})
      data, _status_code, _headers = view_works_v3_rc1_with_http_info(orcid, opts)
      data
    end

    # Fetch all works
    # 
    # @param orcid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WorksSummaryV30Rc1, Fixnum, Hash)>] WorksSummaryV30Rc1 data, response status code and response headers
    def view_works_v3_rc1_with_http_info(orcid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevelopmentMemberAPIV30Rc1Api.view_works_v3_rc1 ...'
      end
      # verify the required parameter 'orcid' is set
      if @api_client.config.client_side_validation && orcid.nil?
        fail ArgumentError, "Missing the required parameter 'orcid' when calling DevelopmentMemberAPIV30Rc1Api.view_works_v3_rc1"
      end
      # resource path
      local_var_path = '/v3.0_rc1/{orcid}/works'.sub('{' + 'orcid' + '}', orcid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.orcid+xml; qs=5', 'application/orcid+xml; qs=3', 'application/xml', 'application/vnd.orcid+json; qs=4', 'application/orcid+json; qs=2', 'application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['orcid_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WorksSummaryV30Rc1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevelopmentMemberAPIV30Rc1Api#view_works_v3_rc1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
